{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","protoType","PropTypes","string","isRequired","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yOAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OAGI,0BAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAKP,EAAWK,QAAhB,mBAA0BE,OAC7CN,EAAc,OASd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SArBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,gBCNlBG,EAAc,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAE/B,OACI,yBAAKC,UAAU,4DACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCPHK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAUF,GAD7C,+DAGAG,MAAOR,GAHP,cAGbS,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QAVvB,kBAcZY,GAdY,4CAAH,sDCKPM,EAAU,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAAc,ECFX,SAAEA,GAAe,IAAD,EAEdpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAdAC,qBAAU,WAENlB,EAAQC,GACHkB,MAAK,SAAAC,GACFH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAKtB,CAACd,IAGGe,EDjBuBK,CAAcpB,GAAhCW,EAFuB,EAE5BL,KAAYQ,EAFgB,EAEhBA,QAEnB,OACI,oCACI,wBAAIlB,UAAU,qDAAqDI,GACjEc,GAAW,uBAAGlB,UAAU,oDAAb,eAEb,yBAAKA,UAAU,aAEPe,EAAOH,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIY,IAAKZ,EAAIC,IACLD,UAUhCI,EAAQS,UAAY,CAChBtB,SAAUuB,IAAUC,OAAOC,YE1B/B,IAyBeC,EAzBM,WAAO,IAAD,EAEa9C,mBAAS,CAAC,gBAFvB,mBAEhB+C,EAFgB,KAEJhD,EAFI,KAIvB,OACI,oCACI,4CACI,kBAAC,EAAD,CAAaA,cAAkBA,IACnC,6BAGA,4BAEQgD,EAAWnB,KAAI,SAAAlB,GAAK,OAChB,kBAAC,EAAD,CACI+B,IAAO/B,EACPU,SAAYV,U,MCfxCsC,IAASC,OAEL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.67957433.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n            setCategories( cats => [inputValue.trim(),...cats]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        //Como el form agrupa diferentes elementos no necesitamos\r\n        //usar fragment <> </> para rendereizar varios elementos\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n            \r\n        </form>\r\n    )\r\n    \r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated  animate__bounce animate__fadeIn \">\r\n            <img src={url} alt={title} />            \r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async(category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=1zMAqyreU311t4jS3l2K7wplGVBb35qP`;\r\n    //peticion http\r\n    const resp = await fetch( url ); //devuelve una promesar gracias al async\r\n    const {data} = await resp.json(); //respuesta en formato JSON\r\n    \r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    \r\n    return gifs;\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images,loading} = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__bounce animate__fadeIn\">{category}</h3>\r\n            { loading && <p className=\"animate__animated animate__bounce animate__pulse\">Cargando...</p>}\r\n            \r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.protoType = {\r\n    category: PropTypes.string.isRequired,\r\n}","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n   \r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            });\r\n        \r\n\r\n    }, [category])\r\n\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Dragon Ball']); \r\n    \r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n                <AddCategory setCategories = { setCategories } />\r\n            <hr/>\r\n\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(value => (\r\n                        <GifGrid \r\n                            key = {value}\r\n                            category = {value}\r\n                         />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}